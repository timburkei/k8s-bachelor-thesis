<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Load Test for Image Compression" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <!-- Benutzerdefinierte Variablen -->
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments">
        <collectionProp name="Arguments.arguments">
          <elementProp name="target_lb" elementType="Argument">
            <stringProp name="Argument.name">target_lb</stringProp>
            <stringProp name="Argument.value">http://ci-agent-hdm-25.REGION.cloudapp.azure.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="target_blob" elementType="Argument">
            <stringProp name="Argument.name">target_blob</stringProp>
            <stringProp name="Argument.value">https://STORAGEACCOUNT.blob.core.windows.net/IMAGE_CONTAINER</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="imageName" elementType="Argument">
            <stringProp name="Argument.name">imageName</stringProp>
            <stringProp name="Argument.value">test-image.jpg</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <!-- Standard Thread Group (hier werden 25 Threads über 120 Sekunden hochgefahren und 7 Minuten lang ausgeführt) -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Load Test Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">25</stringProp>
        <stringProp name="ThreadGroup.ramp_time">120</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">420</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
      </ThreadGroup>
      <hashTree>
        <!-- JSR223 Sampler zur Generierung der eindeutigen ID -->
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Generate UniqueId" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="script">vars.put("uniqueId", java.util.UUID.randomUUID().toString())</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <!-- HTTP Request Defaults für den Load Balancer -->
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults - LB" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <!-- Hier wird der Domain-Teil aus target_lb genutzt. Gegebenenfalls anpassen! -->
          <stringProp name="HTTPSampler.domain">${__split(${target_lb},//,2)}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <!-- HTTP Sampler: Upload Image Test -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Image Test" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <!-- Domain und Protokoll werden aus den Defaults übernommen -->
          <stringProp name="HTTPSampler.path">/upload</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <stringProp name="HTTPSampler.postBodyRaw">true</stringProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files"/>
          </elementProp>
          <stringProp name="HTTPSampler.postBody">{
  "image": "data:image/jpeg;base64,${__FileToString(image_data.txt,,)}",
  "load_testing_id": "${uniqueId}"
}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <!-- HTTP Header Manager für Upload Test -->
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <!-- HTTP Request Defaults für Blob Storage -->
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults - Blob" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <!-- Hier wird der Domain-Teil aus target_blob genutzt. Anpassen, falls nötig! -->
          <stringProp name="HTTPSampler.domain">${__split(${target_blob},https://,2)}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <!-- Loop Controller zur Umsetzung der Retry-Logik (bis zu 3 Versuche) -->
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Retry Controller (3 Versuche)" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </LoopController>
        <hashTree>
          <!-- HTTP Sampler: Check Image Exists Test -->
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Image Exists Test" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <!-- Domain und Protokoll werden aus den Blob-Defaults übernommen -->
            <!-- Der Pfad beinhaltet die generierte uniqueId -->
            <stringProp name="HTTPSampler.path">/${uniqueId}</stringProp>
            <stringProp name="HTTPSampler.method">HEAD</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          </HTTPSamplerProxy>
          <hashTree>
            <!-- Constant Timer für die 10 Sekunden Verzögerung zwischen Wiederholungen -->
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Retry Delay Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
